esphome:
  name: icebreaker
  on_boot:
    priority: -10
    then:
      - http_request.get: https://mqtt-bridge-a57edcfdae3b.herokuapp.com/

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
  level: VERBOSE

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Icebreaker Fallback Hotspot"
    password: "DJjwCeDQqMD1"

captive_portal:

web_server:
  port: 80

ota:
  - platform: esphome
    password: ""

http_request:
  useragent: esphome/device
  verify_ssl: false

interval:
  - interval: 28min
    then:
      - http_request.get: https://mqtt-bridge-a57edcfdae3b.herokuapp.com/

# BLE Beacon Config
esp32_ble_beacon:
  type: iBeacon
  uuid: !secret ble_beacon_uuid
  major: 2
  minor: 3
  measured_power: -59
  # tx_power: -12

# MQTT Configuration
mqtt:
  broker: io.adafruit.com
  username: sebschlo
  password: !secret mqtt_password
  discovery: false
  discover_ip: false
  topic_prefix: sebschlo/feeds
  log_topic: null
  keepalive: 5s
  on_message:
    - topic: sebschlo/feeds/beacon-users
      then:
        - lambda: |-
            ESP_LOGD("mqtt", "Received MQTT message: %s", x.c_str());
            bool success = parse_json(x.c_str(), [](JsonObject json) -> bool {
              if (!json.containsKey("2:3")) {
                ESP_LOGE("mqtt", "Beacon ID '2:3' not found in JSON");
                return false;
              }
              JsonObject beacon_data = json["2:3"];
              if (!beacon_data.containsKey("users")) {
                ESP_LOGE("mqtt", "Key 'users' not found in JSON");
                return false;
              }
              std::string user_list;
              for (JsonVariant user : beacon_data["users"].as<JsonArray>()) {
                // Display user ID directly
                user_list += "User ID: " + user["id"].as<std::string>() + ", ";
              }
              if (!user_list.empty()) {
                user_list.pop_back(); // Remove trailing comma
                user_list.pop_back(); // Remove trailing space
              }
              if (user_list.empty()) {
                user_list = "No users nearby";
              }
              id(latest_mqtt_value).publish_state(user_list);

              return true;
            });

            if (!success) {
              ESP_LOGE("mqtt", "Failed to parse JSON");
            }

    - topic: sebschlo/feeds/conversation-starters
      then:
        - lambda: |-
            ESP_LOGD("mqtt", "Received MQTT message: %s", x.c_str());
            bool success = parse_json(x.c_str(), [](JsonObject json) -> bool {
              if (!json.containsKey("beacon_id") || json["beacon_id"] != "2:3") {
                ESP_LOGE("mqtt", "Beacon ID '2:3' not found in JSON");
                return false;
              }
              if (!json.containsKey("prompt")) {
                ESP_LOGE("mqtt", "Key 'prompt' not found in JSON");
                return false;
              }

              // Extract and publish the prompt
              std::string prompt = json["prompt"].as<std::string>();
              id(beacon_data).publish_state(prompt);

              return true;
            });

            if (!success) {
              ESP_LOGE("mqtt", "Failed to parse JSON");
            }
  birth_message:
    topic: sebschlo/feeds/beacon-users
    payload: "Connected successfully"
  will_message:
    topic: sebschlo/feeds/beacon-users
    payload: "Disconnected"

# Add button to perform HTTP GET request
button:
  - platform: template
    name: "Fetch Beacon Data"
    on_press:
      then:
        - http_request.get:
            url: https://mqtt-bridge-a57edcfdae3b.herokuapp.com/prompt?beacon_id=2:3
            capture_response: true
            on_response:
              then:
                - lambda: |-
                    ESP_LOGD("http_request", "Response body: %s", body.c_str());
                    bool success = parse_json(body, [](JsonObject json) {
                      if (json.containsKey("prompt") && json.containsKey("users")) {
                        std::string prompt = json["prompt"].as<std::string>();
                        std::string users = "Users: ";
                        for (JsonVariant user : json["users"].as<JsonArray>()) {
                          // Display user ID directly
                          users += user.as<std::string>() + ", ";
                        }
                        if (!users.empty()) {
                          users.pop_back(); // Remove trailing comma
                          users.pop_back(); // Remove trailing space
                        }
                        id(beacon_data).publish_state(prompt + "\n" + users);
                      } else {
                        ESP_LOGE("http_request", "Invalid JSON response");
                      }
                      return true;
                    });

                    if (!success) {
                      ESP_LOGE("http_request", "Failed to parse JSON");
                    }

# Add text sensor to display HTTP response
text_sensor:
  - platform: template
    name: "Beacon Data"
    id: beacon_data
  - platform: template
    name: "Latest Signal Strength Received from MQTT"
    id: latest_mqtt_value
